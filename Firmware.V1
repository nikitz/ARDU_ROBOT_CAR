#include <Arduino.h>
// constants won't change. Used here to set a pin number:
#include <NewPing.h>
#define TRIGGER_PIN  A4  // Arduino pin tied to trigger pin on the ultrasonic sensor.
#define ECHO_PIN     A5  // Arduino pin tied to echo pin on the ultrasonic sensor.
#define MAX_DISTANCE 400 // Maximum distance we want to ping for (in centimeters). Maximum sensor distance is rated at 400-500cm.
unsigned int distance_MAX  = 0;
unsigned int distance_MIN = MAX_DISTANCE;
int average_filtered_distance =0 ;
int Sens_count = 0;
float cm ;
NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE); // NewPing setup of pins and maximum distance.

const byte BUTTON = 2 ;
const byte LED = 13;

unsigned long buttonPushedMillis;
unsigned long ScanTurnedOnAt;
unsigned long ScanTurnOnDelay = 1000;
unsigned long ScanTurnOffDelay = 250;
bool ledReady = false;
bool ledState = false;

void setup(){
  Serial.begin(9600);
  Serial.print("STARTED");
pinMode (BUTTON, INPUT_PULLUP);
pinMode(LED, OUTPUT);
digitalWrite(LED,LOW);

}

void loop(/* arguments */) {
  /* code */
unsigned long currentMillis = millis();
if (digitalRead(BUTTON) == LOW){
  buttonPushedMillis = currentMillis;
  Serial.println("Button was Pressed");
  ledReady = true;
}
  if (ledReady){
    if((unsigned long) (currentMillis - buttonPushedMillis) >= ScanTurnOnDelay){
      digitalWrite(LED,HIGH);
      Serial.println("Scan STARTED...");
      ledState = true;
      ScanTurnedOnAt = currentMillis;
      ledReady = false;

      for ( Sens_count = 0; Sens_count <4; Sens_count ++){

          // make olimpik fitering
          cm = sonar.ping_cm();
          Serial.println("");
          Serial.print(cm); // Send ping, get distance in cm and print result (0 = outside set distance range)
          Serial.print("cm");
          if(cm<distance_MIN)distance_MIN = cm;
          Serial.print(distance_MIN);
          if(cm>distance_MAX)distance_MAX = cm;
          Serial.print(distance_MAX);
          average_filtered_distance += cm;
          Serial.println();
          //Serial.print(cm);
          delay(30);
        }
Serial.println(average_filtered_distance);
average_filtered_distance -= distance_MIN;
average_filtered_distance -= distance_MAX;
Serial.println(average_filtered_distance);
average_filtered_distance = average_filtered_distance/(Sens_count -2);
Serial.println();
Serial.println(average_filtered_distance);
distance_MIN = MAX_DISTANCE;
distance_MAX = 0;
average_filtered_distance = 0;

    }
  }
  if (ledState){
    if ((unsigned long)(currentMillis - ScanTurnedOnAt) >= ScanTurnOffDelay){
      ledState = false;
      digitalWrite(LED,LOW);
      Serial.println("");
      Serial.println("END of SCAN");
    }
  }
}
